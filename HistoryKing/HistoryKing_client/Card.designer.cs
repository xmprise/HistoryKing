#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.239
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HistoryKing_client
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Historyking")]
	public partial class CardDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 확장성 메서드 정의
    partial void OnCreated();
    partial void InsertEnemyCard(EnemyCard instance);
    partial void UpdateEnemyCard(EnemyCard instance);
    partial void DeleteEnemyCard(EnemyCard instance);
    partial void InsertEnemyHero(EnemyHero instance);
    partial void UpdateEnemyHero(EnemyHero instance);
    partial void DeleteEnemyHero(EnemyHero instance);
    partial void InsertGoldCard(GoldCard instance);
    partial void UpdateGoldCard(GoldCard instance);
    partial void DeleteGoldCard(GoldCard instance);
    partial void InsertMemberCardDeck(MemberCardDeck instance);
    partial void UpdateMemberCardDeck(MemberCardDeck instance);
    partial void DeleteMemberCardDeck(MemberCardDeck instance);
    partial void InsertMagicCard(MagicCard instance);
    partial void UpdateMagicCard(MagicCard instance);
    partial void DeleteMagicCard(MagicCard instance);
    partial void InsertHeroCard(HeroCard instance);
    partial void UpdateHeroCard(HeroCard instance);
    partial void DeleteHeroCard(HeroCard instance);
    partial void InsertCardNumber(CardNumber instance);
    partial void UpdateCardNumber(CardNumber instance);
    partial void DeleteCardNumber(CardNumber instance);
    partial void InsertHeroCardSkill(HeroCardSkill instance);
    partial void UpdateHeroCardSkill(HeroCardSkill instance);
    partial void DeleteHeroCardSkill(HeroCardSkill instance);
    partial void InsertGameDeck(GameDeck instance);
    partial void UpdateGameDeck(GameDeck instance);
    partial void DeleteGameDeck(GameDeck instance);
    partial void InsertEnemyCardSkill(EnemyCardSkill instance);
    partial void UpdateEnemyCardSkill(EnemyCardSkill instance);
    partial void DeleteEnemyCardSkill(EnemyCardSkill instance);
    #endregion
		
		public CardDataContext() : 
				base(global::HistoryKing_client.Properties.Settings.Default.HistorykingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CardDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CardDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CardDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CardDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EnemyCard> EnemyCard
		{
			get
			{
				return this.GetTable<EnemyCard>();
			}
		}
		
		public System.Data.Linq.Table<EnemyHero> EnemyHero
		{
			get
			{
				return this.GetTable<EnemyHero>();
			}
		}
		
		public System.Data.Linq.Table<GoldCard> GoldCard
		{
			get
			{
				return this.GetTable<GoldCard>();
			}
		}
		
		public System.Data.Linq.Table<MemberCardDeck> MemberCardDeck
		{
			get
			{
				return this.GetTable<MemberCardDeck>();
			}
		}
		
		public System.Data.Linq.Table<MagicCard> MagicCard
		{
			get
			{
				return this.GetTable<MagicCard>();
			}
		}
		
		public System.Data.Linq.Table<HeroCard> HeroCard
		{
			get
			{
				return this.GetTable<HeroCard>();
			}
		}
		
		public System.Data.Linq.Table<CardNumber> CardNumber
		{
			get
			{
				return this.GetTable<CardNumber>();
			}
		}
		
		public System.Data.Linq.Table<HeroCardSkill> HeroCardSkill
		{
			get
			{
				return this.GetTable<HeroCardSkill>();
			}
		}
		
		public System.Data.Linq.Table<GameDeck> GameDeck
		{
			get
			{
				return this.GetTable<GameDeck>();
			}
		}
		
		public System.Data.Linq.Table<EnemyCardSkill> EnemyCardSkill
		{
			get
			{
				return this.GetTable<EnemyCardSkill>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Game_CardDeck")]
		public int Game_CardDeck([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MemberName", DbType="VarChar(50)")] string memberName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), memberName);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SingleGame.EnemyCard")]
	public partial class EnemyCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnemyCardID;
		
		private string _EnemyCardName;
		
		private int _EnemyCardAttackPoint;
		
		private int _EnemyCardHealthPoint;
		
		private System.Nullable<int> _SkillID;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnemyCardIDChanging(int value);
    partial void OnEnemyCardIDChanged();
    partial void OnEnemyCardNameChanging(string value);
    partial void OnEnemyCardNameChanged();
    partial void OnEnemyCardAttackPointChanging(int value);
    partial void OnEnemyCardAttackPointChanged();
    partial void OnEnemyCardHealthPointChanging(int value);
    partial void OnEnemyCardHealthPointChanged();
    partial void OnSkillIDChanging(System.Nullable<int> value);
    partial void OnSkillIDChanged();
    #endregion
		
		public EnemyCard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyCardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnemyCardID
		{
			get
			{
				return this._EnemyCardID;
			}
			set
			{
				if ((this._EnemyCardID != value))
				{
					this.OnEnemyCardIDChanging(value);
					this.SendPropertyChanging();
					this._EnemyCardID = value;
					this.SendPropertyChanged("EnemyCardID");
					this.OnEnemyCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyCardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnemyCardName
		{
			get
			{
				return this._EnemyCardName;
			}
			set
			{
				if ((this._EnemyCardName != value))
				{
					this.OnEnemyCardNameChanging(value);
					this.SendPropertyChanging();
					this._EnemyCardName = value;
					this.SendPropertyChanged("EnemyCardName");
					this.OnEnemyCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyCardAttackPoint", DbType="Int NOT NULL")]
		public int EnemyCardAttackPoint
		{
			get
			{
				return this._EnemyCardAttackPoint;
			}
			set
			{
				if ((this._EnemyCardAttackPoint != value))
				{
					this.OnEnemyCardAttackPointChanging(value);
					this.SendPropertyChanging();
					this._EnemyCardAttackPoint = value;
					this.SendPropertyChanged("EnemyCardAttackPoint");
					this.OnEnemyCardAttackPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyCardHealthPoint", DbType="Int NOT NULL")]
		public int EnemyCardHealthPoint
		{
			get
			{
				return this._EnemyCardHealthPoint;
			}
			set
			{
				if ((this._EnemyCardHealthPoint != value))
				{
					this.OnEnemyCardHealthPointChanging(value);
					this.SendPropertyChanging();
					this._EnemyCardHealthPoint = value;
					this.SendPropertyChanged("EnemyCardHealthPoint");
					this.OnEnemyCardHealthPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int")]
		public System.Nullable<int> SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SingleGame.EnemyHero")]
	public partial class EnemyHero : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnemyHeroID;
		
		private string _EnemyHeroName;
		
		private int _EnemyHeroAttackPoint;
		
		private int _EnemyHeroHealthPoint;
		
		private string _EnemyHeroInformation;
		
		private System.Nullable<int> _SkillID;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnemyHeroIDChanging(int value);
    partial void OnEnemyHeroIDChanged();
    partial void OnEnemyHeroNameChanging(string value);
    partial void OnEnemyHeroNameChanged();
    partial void OnEnemyHeroAttackPointChanging(int value);
    partial void OnEnemyHeroAttackPointChanged();
    partial void OnEnemyHeroHealthPointChanging(int value);
    partial void OnEnemyHeroHealthPointChanged();
    partial void OnEnemyHeroInformationChanging(string value);
    partial void OnEnemyHeroInformationChanged();
    partial void OnSkillIDChanging(System.Nullable<int> value);
    partial void OnSkillIDChanged();
    #endregion
		
		public EnemyHero()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyHeroID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EnemyHeroID
		{
			get
			{
				return this._EnemyHeroID;
			}
			set
			{
				if ((this._EnemyHeroID != value))
				{
					this.OnEnemyHeroIDChanging(value);
					this.SendPropertyChanging();
					this._EnemyHeroID = value;
					this.SendPropertyChanged("EnemyHeroID");
					this.OnEnemyHeroIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyHeroName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnemyHeroName
		{
			get
			{
				return this._EnemyHeroName;
			}
			set
			{
				if ((this._EnemyHeroName != value))
				{
					this.OnEnemyHeroNameChanging(value);
					this.SendPropertyChanging();
					this._EnemyHeroName = value;
					this.SendPropertyChanged("EnemyHeroName");
					this.OnEnemyHeroNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyHeroAttackPoint", DbType="Int NOT NULL")]
		public int EnemyHeroAttackPoint
		{
			get
			{
				return this._EnemyHeroAttackPoint;
			}
			set
			{
				if ((this._EnemyHeroAttackPoint != value))
				{
					this.OnEnemyHeroAttackPointChanging(value);
					this.SendPropertyChanging();
					this._EnemyHeroAttackPoint = value;
					this.SendPropertyChanged("EnemyHeroAttackPoint");
					this.OnEnemyHeroAttackPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyHeroHealthPoint", DbType="Int NOT NULL")]
		public int EnemyHeroHealthPoint
		{
			get
			{
				return this._EnemyHeroHealthPoint;
			}
			set
			{
				if ((this._EnemyHeroHealthPoint != value))
				{
					this.OnEnemyHeroHealthPointChanging(value);
					this.SendPropertyChanging();
					this._EnemyHeroHealthPoint = value;
					this.SendPropertyChanged("EnemyHeroHealthPoint");
					this.OnEnemyHeroHealthPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyHeroInformation", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EnemyHeroInformation
		{
			get
			{
				return this._EnemyHeroInformation;
			}
			set
			{
				if ((this._EnemyHeroInformation != value))
				{
					this.OnEnemyHeroInformationChanging(value);
					this.SendPropertyChanging();
					this._EnemyHeroInformation = value;
					this.SendPropertyChanged("EnemyHeroInformation");
					this.OnEnemyHeroInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int")]
		public System.Nullable<int> SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SingleGame.GoldCard")]
	public partial class GoldCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GoldCardID;
		
		private string _GoldCardNmae;
		
		private string _GoldCardQuiz;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGoldCardIDChanging(int value);
    partial void OnGoldCardIDChanged();
    partial void OnGoldCardNmaeChanging(string value);
    partial void OnGoldCardNmaeChanged();
    partial void OnGoldCardQuizChanging(string value);
    partial void OnGoldCardQuizChanged();
    #endregion
		
		public GoldCard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoldCardID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GoldCardID
		{
			get
			{
				return this._GoldCardID;
			}
			set
			{
				if ((this._GoldCardID != value))
				{
					this.OnGoldCardIDChanging(value);
					this.SendPropertyChanging();
					this._GoldCardID = value;
					this.SendPropertyChanged("GoldCardID");
					this.OnGoldCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoldCardNmae", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GoldCardNmae
		{
			get
			{
				return this._GoldCardNmae;
			}
			set
			{
				if ((this._GoldCardNmae != value))
				{
					this.OnGoldCardNmaeChanging(value);
					this.SendPropertyChanging();
					this._GoldCardNmae = value;
					this.SendPropertyChanged("GoldCardNmae");
					this.OnGoldCardNmaeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoldCardQuiz", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string GoldCardQuiz
		{
			get
			{
				return this._GoldCardQuiz;
			}
			set
			{
				if ((this._GoldCardQuiz != value))
				{
					this.OnGoldCardQuizChanging(value);
					this.SendPropertyChanging();
					this._GoldCardQuiz = value;
					this.SendPropertyChanged("GoldCardQuiz");
					this.OnGoldCardQuizChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Mem.MemberCardDeck")]
	public partial class MemberCardDeck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardDeckID;
		
		private string _MemberName;
		
		private int _CardNumberID;
		
		private EntityRef<CardNumber> _CardNumber;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardDeckIDChanging(int value);
    partial void OnCardDeckIDChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnCardNumberIDChanging(int value);
    partial void OnCardNumberIDChanged();
    #endregion
		
		public MemberCardDeck()
		{
			this._CardNumber = default(EntityRef<CardNumber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardDeckID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CardDeckID
		{
			get
			{
				return this._CardDeckID;
			}
			set
			{
				if ((this._CardDeckID != value))
				{
					this.OnCardDeckIDChanging(value);
					this.SendPropertyChanging();
					this._CardDeckID = value;
					this.SendPropertyChanged("CardDeckID");
					this.OnCardDeckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumberID", DbType="Int NOT NULL")]
		public int CardNumberID
		{
			get
			{
				return this._CardNumberID;
			}
			set
			{
				if ((this._CardNumberID != value))
				{
					if (this._CardNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardNumberIDChanging(value);
					this.SendPropertyChanging();
					this._CardNumberID = value;
					this.SendPropertyChanged("CardNumberID");
					this.OnCardNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_MemberCardDeck", Storage="_CardNumber", ThisKey="CardNumberID", OtherKey="CardNumberID", IsForeignKey=true)]
		public CardNumber CardNumber
		{
			get
			{
				return this._CardNumber.Entity;
			}
			set
			{
				CardNumber previousValue = this._CardNumber.Entity;
				if (((previousValue != value) 
							|| (this._CardNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardNumber.Entity = null;
						previousValue.MemberCardDeck.Remove(this);
					}
					this._CardNumber.Entity = value;
					if ((value != null))
					{
						value.MemberCardDeck.Add(this);
						this._CardNumberID = value.CardNumberID;
					}
					else
					{
						this._CardNumberID = default(int);
					}
					this.SendPropertyChanged("CardNumber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Game.MagicCard")]
	public partial class MagicCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MagicCardID;
		
		private string _MagicCardName;
		
		private System.Nullable<int> _CardNumberID;
		
		private string _MagicCardInformation;
		
		private EntityRef<CardNumber> _CardNumber;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMagicCardIDChanging(int value);
    partial void OnMagicCardIDChanged();
    partial void OnMagicCardNameChanging(string value);
    partial void OnMagicCardNameChanged();
    partial void OnCardNumberIDChanging(System.Nullable<int> value);
    partial void OnCardNumberIDChanged();
    partial void OnMagicCardInformationChanging(string value);
    partial void OnMagicCardInformationChanged();
    #endregion
		
		public MagicCard()
		{
			this._CardNumber = default(EntityRef<CardNumber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MagicCardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MagicCardID
		{
			get
			{
				return this._MagicCardID;
			}
			set
			{
				if ((this._MagicCardID != value))
				{
					this.OnMagicCardIDChanging(value);
					this.SendPropertyChanging();
					this._MagicCardID = value;
					this.SendPropertyChanged("MagicCardID");
					this.OnMagicCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MagicCardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MagicCardName
		{
			get
			{
				return this._MagicCardName;
			}
			set
			{
				if ((this._MagicCardName != value))
				{
					this.OnMagicCardNameChanging(value);
					this.SendPropertyChanging();
					this._MagicCardName = value;
					this.SendPropertyChanged("MagicCardName");
					this.OnMagicCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumberID", DbType="Int")]
		public System.Nullable<int> CardNumberID
		{
			get
			{
				return this._CardNumberID;
			}
			set
			{
				if ((this._CardNumberID != value))
				{
					if (this._CardNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardNumberIDChanging(value);
					this.SendPropertyChanging();
					this._CardNumberID = value;
					this.SendPropertyChanged("CardNumberID");
					this.OnCardNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MagicCardInformation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MagicCardInformation
		{
			get
			{
				return this._MagicCardInformation;
			}
			set
			{
				if ((this._MagicCardInformation != value))
				{
					this.OnMagicCardInformationChanging(value);
					this.SendPropertyChanging();
					this._MagicCardInformation = value;
					this.SendPropertyChanged("MagicCardInformation");
					this.OnMagicCardInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_MagicCard", Storage="_CardNumber", ThisKey="CardNumberID", OtherKey="CardNumberID", IsForeignKey=true)]
		public CardNumber CardNumber
		{
			get
			{
				return this._CardNumber.Entity;
			}
			set
			{
				CardNumber previousValue = this._CardNumber.Entity;
				if (((previousValue != value) 
							|| (this._CardNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardNumber.Entity = null;
						previousValue.MagicCard.Remove(this);
					}
					this._CardNumber.Entity = value;
					if ((value != null))
					{
						value.MagicCard.Add(this);
						this._CardNumberID = value.CardNumberID;
					}
					else
					{
						this._CardNumberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CardNumber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Game.HeroCard")]
	public partial class HeroCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HeroCardID;
		
		private string _HeroCardName;
		
		private int _HeroCardAttackPoint;
		
		private int _HeroCardHealthPoint;
		
		private System.Nullable<int> _SkillID;
		
		private System.Nullable<int> _CardNumberID;
		
		private string _HeroCardInformation;
		
		private EntityRef<CardNumber> _CardNumber;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHeroCardIDChanging(int value);
    partial void OnHeroCardIDChanged();
    partial void OnHeroCardNameChanging(string value);
    partial void OnHeroCardNameChanged();
    partial void OnHeroCardAttackPointChanging(int value);
    partial void OnHeroCardAttackPointChanged();
    partial void OnHeroCardHealthPointChanging(int value);
    partial void OnHeroCardHealthPointChanged();
    partial void OnSkillIDChanging(System.Nullable<int> value);
    partial void OnSkillIDChanged();
    partial void OnCardNumberIDChanging(System.Nullable<int> value);
    partial void OnCardNumberIDChanged();
    partial void OnHeroCardInformationChanging(string value);
    partial void OnHeroCardInformationChanged();
    #endregion
		
		public HeroCard()
		{
			this._CardNumber = default(EntityRef<CardNumber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroCardID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int HeroCardID
		{
			get
			{
				return this._HeroCardID;
			}
			set
			{
				if ((this._HeroCardID != value))
				{
					this.OnHeroCardIDChanging(value);
					this.SendPropertyChanging();
					this._HeroCardID = value;
					this.SendPropertyChanged("HeroCardID");
					this.OnHeroCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroCardName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HeroCardName
		{
			get
			{
				return this._HeroCardName;
			}
			set
			{
				if ((this._HeroCardName != value))
				{
					this.OnHeroCardNameChanging(value);
					this.SendPropertyChanging();
					this._HeroCardName = value;
					this.SendPropertyChanged("HeroCardName");
					this.OnHeroCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroCardAttackPoint", DbType="Int NOT NULL")]
		public int HeroCardAttackPoint
		{
			get
			{
				return this._HeroCardAttackPoint;
			}
			set
			{
				if ((this._HeroCardAttackPoint != value))
				{
					this.OnHeroCardAttackPointChanging(value);
					this.SendPropertyChanging();
					this._HeroCardAttackPoint = value;
					this.SendPropertyChanged("HeroCardAttackPoint");
					this.OnHeroCardAttackPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroCardHealthPoint", DbType="Int NOT NULL")]
		public int HeroCardHealthPoint
		{
			get
			{
				return this._HeroCardHealthPoint;
			}
			set
			{
				if ((this._HeroCardHealthPoint != value))
				{
					this.OnHeroCardHealthPointChanging(value);
					this.SendPropertyChanging();
					this._HeroCardHealthPoint = value;
					this.SendPropertyChanged("HeroCardHealthPoint");
					this.OnHeroCardHealthPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int")]
		public System.Nullable<int> SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumberID", DbType="Int")]
		public System.Nullable<int> CardNumberID
		{
			get
			{
				return this._CardNumberID;
			}
			set
			{
				if ((this._CardNumberID != value))
				{
					if (this._CardNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardNumberIDChanging(value);
					this.SendPropertyChanging();
					this._CardNumberID = value;
					this.SendPropertyChanged("CardNumberID");
					this.OnCardNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroCardInformation", DbType="VarChar(50)")]
		public string HeroCardInformation
		{
			get
			{
				return this._HeroCardInformation;
			}
			set
			{
				if ((this._HeroCardInformation != value))
				{
					this.OnHeroCardInformationChanging(value);
					this.SendPropertyChanging();
					this._HeroCardInformation = value;
					this.SendPropertyChanged("HeroCardInformation");
					this.OnHeroCardInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_HeroCard", Storage="_CardNumber", ThisKey="CardNumberID", OtherKey="CardNumberID", IsForeignKey=true)]
		public CardNumber CardNumber
		{
			get
			{
				return this._CardNumber.Entity;
			}
			set
			{
				CardNumber previousValue = this._CardNumber.Entity;
				if (((previousValue != value) 
							|| (this._CardNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardNumber.Entity = null;
						previousValue.HeroCard.Remove(this);
					}
					this._CardNumber.Entity = value;
					if ((value != null))
					{
						value.HeroCard.Add(this);
						this._CardNumberID = value.CardNumberID;
					}
					else
					{
						this._CardNumberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CardNumber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Game.CardNumber")]
	public partial class CardNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardNumberID;
		
		private EntitySet<MemberCardDeck> _MemberCardDeck;
		
		private EntitySet<MagicCard> _MagicCard;
		
		private EntitySet<HeroCard> _HeroCard;
		
		private EntitySet<GameDeck> _GameDeck;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardNumberIDChanging(int value);
    partial void OnCardNumberIDChanged();
    #endregion
		
		public CardNumber()
		{
			this._MemberCardDeck = new EntitySet<MemberCardDeck>(new Action<MemberCardDeck>(this.attach_MemberCardDeck), new Action<MemberCardDeck>(this.detach_MemberCardDeck));
			this._MagicCard = new EntitySet<MagicCard>(new Action<MagicCard>(this.attach_MagicCard), new Action<MagicCard>(this.detach_MagicCard));
			this._HeroCard = new EntitySet<HeroCard>(new Action<HeroCard>(this.attach_HeroCard), new Action<HeroCard>(this.detach_HeroCard));
			this._GameDeck = new EntitySet<GameDeck>(new Action<GameDeck>(this.attach_GameDeck), new Action<GameDeck>(this.detach_GameDeck));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumberID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CardNumberID
		{
			get
			{
				return this._CardNumberID;
			}
			set
			{
				if ((this._CardNumberID != value))
				{
					this.OnCardNumberIDChanging(value);
					this.SendPropertyChanging();
					this._CardNumberID = value;
					this.SendPropertyChanged("CardNumberID");
					this.OnCardNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_MemberCardDeck", Storage="_MemberCardDeck", ThisKey="CardNumberID", OtherKey="CardNumberID")]
		public EntitySet<MemberCardDeck> MemberCardDeck
		{
			get
			{
				return this._MemberCardDeck;
			}
			set
			{
				this._MemberCardDeck.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_MagicCard", Storage="_MagicCard", ThisKey="CardNumberID", OtherKey="CardNumberID")]
		public EntitySet<MagicCard> MagicCard
		{
			get
			{
				return this._MagicCard;
			}
			set
			{
				this._MagicCard.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_HeroCard", Storage="_HeroCard", ThisKey="CardNumberID", OtherKey="CardNumberID")]
		public EntitySet<HeroCard> HeroCard
		{
			get
			{
				return this._HeroCard;
			}
			set
			{
				this._HeroCard.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_GameDeck", Storage="_GameDeck", ThisKey="CardNumberID", OtherKey="CardNumberID")]
		public EntitySet<GameDeck> GameDeck
		{
			get
			{
				return this._GameDeck;
			}
			set
			{
				this._GameDeck.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MemberCardDeck(MemberCardDeck entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = this;
		}
		
		private void detach_MemberCardDeck(MemberCardDeck entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = null;
		}
		
		private void attach_MagicCard(MagicCard entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = this;
		}
		
		private void detach_MagicCard(MagicCard entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = null;
		}
		
		private void attach_HeroCard(HeroCard entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = this;
		}
		
		private void detach_HeroCard(HeroCard entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = null;
		}
		
		private void attach_GameDeck(GameDeck entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = this;
		}
		
		private void detach_GameDeck(GameDeck entity)
		{
			this.SendPropertyChanging();
			entity.CardNumber = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Game.HeroCardSkill")]
	public partial class HeroCardSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SkillID;
		
		private string _HeroCardName;
		
		private string _SkillName;
		
		private int _SkillPoint;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSkillIDChanging(int value);
    partial void OnSkillIDChanged();
    partial void OnHeroCardNameChanging(string value);
    partial void OnHeroCardNameChanged();
    partial void OnSkillNameChanging(string value);
    partial void OnSkillNameChanged();
    partial void OnSkillPointChanging(int value);
    partial void OnSkillPointChanged();
    #endregion
		
		public HeroCardSkill()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeroCardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HeroCardName
		{
			get
			{
				return this._HeroCardName;
			}
			set
			{
				if ((this._HeroCardName != value))
				{
					this.OnHeroCardNameChanging(value);
					this.SendPropertyChanging();
					this._HeroCardName = value;
					this.SendPropertyChanged("HeroCardName");
					this.OnHeroCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SkillName
		{
			get
			{
				return this._SkillName;
			}
			set
			{
				if ((this._SkillName != value))
				{
					this.OnSkillNameChanging(value);
					this.SendPropertyChanging();
					this._SkillName = value;
					this.SendPropertyChanged("SkillName");
					this.OnSkillNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillPoint", DbType="Int NOT NULL")]
		public int SkillPoint
		{
			get
			{
				return this._SkillPoint;
			}
			set
			{
				if ((this._SkillPoint != value))
				{
					this.OnSkillPointChanging(value);
					this.SendPropertyChanging();
					this._SkillPoint = value;
					this.SendPropertyChanged("SkillPoint");
					this.OnSkillPointChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Game.GameDeck")]
	public partial class GameDeck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GameDeckID;
		
		private string _MemberName;
		
		private int _CardNumberID;
		
		private EntityRef<CardNumber> _CardNumber;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameDeckIDChanging(int value);
    partial void OnGameDeckIDChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnCardNumberIDChanging(int value);
    partial void OnCardNumberIDChanged();
    #endregion
		
		public GameDeck()
		{
			this._CardNumber = default(EntityRef<CardNumber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDeckID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GameDeckID
		{
			get
			{
				return this._GameDeckID;
			}
			set
			{
				if ((this._GameDeckID != value))
				{
					this.OnGameDeckIDChanging(value);
					this.SendPropertyChanging();
					this._GameDeckID = value;
					this.SendPropertyChanged("GameDeckID");
					this.OnGameDeckIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumberID", DbType="Int NOT NULL")]
		public int CardNumberID
		{
			get
			{
				return this._CardNumberID;
			}
			set
			{
				if ((this._CardNumberID != value))
				{
					if (this._CardNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardNumberIDChanging(value);
					this.SendPropertyChanging();
					this._CardNumberID = value;
					this.SendPropertyChanged("CardNumberID");
					this.OnCardNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardNumber_GameDeck", Storage="_CardNumber", ThisKey="CardNumberID", OtherKey="CardNumberID", IsForeignKey=true)]
		public CardNumber CardNumber
		{
			get
			{
				return this._CardNumber.Entity;
			}
			set
			{
				CardNumber previousValue = this._CardNumber.Entity;
				if (((previousValue != value) 
							|| (this._CardNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardNumber.Entity = null;
						previousValue.GameDeck.Remove(this);
					}
					this._CardNumber.Entity = value;
					if ((value != null))
					{
						value.GameDeck.Add(this);
						this._CardNumberID = value.CardNumberID;
					}
					else
					{
						this._CardNumberID = default(int);
					}
					this.SendPropertyChanged("CardNumber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SingleGame.EnemyCardSkill")]
	public partial class EnemyCardSkill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SkillID;
		
		private string _EnemyCardName;
		
		private string _SkillName;
		
		private int _SkillPoint;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSkillIDChanging(int value);
    partial void OnSkillIDChanged();
    partial void OnEnemyCardNameChanging(string value);
    partial void OnEnemyCardNameChanged();
    partial void OnSkillNameChanging(string value);
    partial void OnSkillNameChanged();
    partial void OnSkillPointChanging(int value);
    partial void OnSkillPointChanged();
    #endregion
		
		public EnemyCardSkill()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnemyCardName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EnemyCardName
		{
			get
			{
				return this._EnemyCardName;
			}
			set
			{
				if ((this._EnemyCardName != value))
				{
					this.OnEnemyCardNameChanging(value);
					this.SendPropertyChanging();
					this._EnemyCardName = value;
					this.SendPropertyChanged("EnemyCardName");
					this.OnEnemyCardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SkillName
		{
			get
			{
				return this._SkillName;
			}
			set
			{
				if ((this._SkillName != value))
				{
					this.OnSkillNameChanging(value);
					this.SendPropertyChanging();
					this._SkillName = value;
					this.SendPropertyChanged("SkillName");
					this.OnSkillNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillPoint", DbType="Int NOT NULL")]
		public int SkillPoint
		{
			get
			{
				return this._SkillPoint;
			}
			set
			{
				if ((this._SkillPoint != value))
				{
					this.OnSkillPointChanging(value);
					this.SendPropertyChanging();
					this._SkillPoint = value;
					this.SendPropertyChanged("SkillPoint");
					this.OnSkillPointChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
