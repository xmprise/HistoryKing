#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HistoryKing_client
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Historyking")]
	public partial class MemberDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMemberCharacter(MemberCharacter instance);
    partial void UpdateMemberCharacter(MemberCharacter instance);
    partial void DeleteMemberCharacter(MemberCharacter instance);
    #endregion
		
		public MemberDataContext() : 
				base(global::HistoryKing_client.Properties.Settings.Default.HistorykingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MemberDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemberDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemberDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MemberDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Member> Member
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<MemberCharacter> MemberCharacter
		{
			get
			{
				return this.GetTable<MemberCharacter>();
			}
		}
		
		public System.Data.Linq.Table<MemberGameInformation> MemberGameInformation
		{
			get
			{
				return this.GetTable<MemberGameInformation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Mem.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _MemberName;
		
		private string _MemberPassword;
		
		private string _MemberPassword2;
		
		private EntitySet<MemberCharacter> _MemberCharacter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnMemberPasswordChanging(string value);
    partial void OnMemberPasswordChanged();
    partial void OnMemberPassword2Changing(string value);
    partial void OnMemberPassword2Changed();
    #endregion
		
		public Member()
		{
			this._MemberCharacter = new EntitySet<MemberCharacter>(new Action<MemberCharacter>(this.attach_MemberCharacter), new Action<MemberCharacter>(this.detach_MemberCharacter));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberPassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberPassword
		{
			get
			{
				return this._MemberPassword;
			}
			set
			{
				if ((this._MemberPassword != value))
				{
					this.OnMemberPasswordChanging(value);
					this.SendPropertyChanging();
					this._MemberPassword = value;
					this.SendPropertyChanged("MemberPassword");
					this.OnMemberPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberPassword2", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberPassword2
		{
			get
			{
				return this._MemberPassword2;
			}
			set
			{
				if ((this._MemberPassword2 != value))
				{
					this.OnMemberPassword2Changing(value);
					this.SendPropertyChanging();
					this._MemberPassword2 = value;
					this.SendPropertyChanged("MemberPassword2");
					this.OnMemberPassword2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberCharacter", Storage="_MemberCharacter", ThisKey="MemberName", OtherKey="MemberName")]
		public EntitySet<MemberCharacter> MemberCharacter
		{
			get
			{
				return this._MemberCharacter;
			}
			set
			{
				this._MemberCharacter.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MemberCharacter(MemberCharacter entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_MemberCharacter(MemberCharacter entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Mem.MemberCharacter")]
	public partial class MemberCharacter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CharacterID;
		
		private string _MemberName;
		
		private System.Data.Linq.Binary _CharacterImage;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCharacterIDChanging(int value);
    partial void OnCharacterIDChanged();
    partial void OnMemberNameChanging(string value);
    partial void OnMemberNameChanged();
    partial void OnCharacterImageChanging(System.Data.Linq.Binary value);
    partial void OnCharacterImageChanged();
    #endregion
		
		public MemberCharacter()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CharacterID
		{
			get
			{
				return this._CharacterID;
			}
			set
			{
				if ((this._CharacterID != value))
				{
					this.OnCharacterIDChanging(value);
					this.SendPropertyChanging();
					this._CharacterID = value;
					this.SendPropertyChanged("CharacterID");
					this.OnCharacterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberNameChanging(value);
					this.SendPropertyChanging();
					this._MemberName = value;
					this.SendPropertyChanged("MemberName");
					this.OnMemberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterImage", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CharacterImage
		{
			get
			{
				return this._CharacterImage;
			}
			set
			{
				if ((this._CharacterImage != value))
				{
					this.OnCharacterImageChanging(value);
					this.SendPropertyChanging();
					this._CharacterImage = value;
					this.SendPropertyChanged("CharacterImage");
					this.OnCharacterImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_MemberCharacter", Storage="_Member", ThisKey="MemberName", OtherKey="MemberName", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.MemberCharacter.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.MemberCharacter.Add(this);
						this._MemberName = value.MemberName;
					}
					else
					{
						this._MemberName = default(string);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Mem.MemberGameInformation")]
	public partial class MemberGameInformation
	{
		
		private int _MemberGameInformationID;
		
		private string _MemberName;
		
		private System.Nullable<int> _GameStage;
		
		private System.Nullable<int> _GamePhase;
		
		public MemberGameInformation()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberGameInformationID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int MemberGameInformationID
		{
			get
			{
				return this._MemberGameInformationID;
			}
			set
			{
				if ((this._MemberGameInformationID != value))
				{
					this._MemberGameInformationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this._MemberName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameStage", DbType="Int")]
		public System.Nullable<int> GameStage
		{
			get
			{
				return this._GameStage;
			}
			set
			{
				if ((this._GameStage != value))
				{
					this._GameStage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamePhase", DbType="Int")]
		public System.Nullable<int> GamePhase
		{
			get
			{
				return this._GamePhase;
			}
			set
			{
				if ((this._GamePhase != value))
				{
					this._GamePhase = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
